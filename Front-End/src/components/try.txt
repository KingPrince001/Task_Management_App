import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import {
  CircularProgress,
  Card,
  CardContent,
  Typography,
  Grid,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
  IconButton,
} from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import { useForm, Controller } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { Autocomplete, TextField, Chip } from "@mui/material";
import {
  getProjectWithMembers,
  updateProject,
  deleteProject,
} from "../redux/apiCall";

const ExistingProjects = () => {
  const dispatch = useDispatch();
  const projectWithMembers = useSelector(
    (state) => state.projectWithMembers?.projectWithMembers
  );
  const userList = useSelector((state) => state.userList?.userList);
  const isLoading = projectWithMembers === null;
  const [selectedProject, setSelectedProject] = useState({});
  const [openDialog, setOpenDialog] = useState(false);
  const [openDialog2, setOpenDialog2] = useState(false);
  const [groupedProjects, setGroupedProjects] = useState([]);

  useEffect(() => {
    getProjectWithMembers(dispatch);
  }, [dispatch]);

  useEffect(() => {
    const grouped = projectWithMembers?.reduce((result, project) => {
      const existingProject = result.find(
        (p) => p.projectId === project.projectId
      );
      if (existingProject) {
        existingProject.members.push({
          username: project.username,
          email: project.email,
        });
      } else {
        result.push({
          projectId: project.projectId,
          projectName: project.projectName,
          description: project.description,
          startDate: project.startDate,
          endDate: project.endDate,
          urgency: project.urgency,
          category: project.category,
          status: project.status,
          members: [
            {
              username: project.username,
              email: project.email,
            },
          ],
        });
      }
      return result;
    }, []);
    setGroupedProjects(grouped);
  }, [projectWithMembers]);

  const handleViewMembers = (projectId) => {
    const selectedProject = groupedProjects.find(
      (project) => project.projectId === projectId
    );
    setSelectedProject(selectedProject);
    setOpenDialog(true);
  };

  const handleEditProject = (projectId) => {
    const selectedProject = groupedProjects.find(
      (project) => project.projectId === projectId
    );

    // Map the existing member IDs to user objects from the userList
    const selectedMembers = selectedProject.members?.map((member) => {
      const user = userList?.find((user) => user.user_id === member.user_id);
      return user;
    });

    setSelectedProject({
      ...selectedProject,
      members: selectedMembers || [], // Ensure selectedMembers is not null
    });

    setOpenDialog2(true);
  };

  const handleCloseDialog = () => {
    setSelectedProject({});
    setOpenDialog(false);
  };

  const handleCloseDialog2 = () => {
    setSelectedProject({});
    setOpenDialog2(false);
  };

  const schema = yup.object().shape({
    projectName: yup.string().required("Project name is required"),
    description: yup.string().required("Description is required"),
    startDate: yup.string().required("Start date is required"),
    endDate: yup.string().required("End date is required"),
    urgency: yup.string().required("Urgency is required"),
    category: yup.string().required("Category is required"),
  });

  const formatDate = (dateStr) => {
    const date = new Date(dateStr);
    return date.toLocaleDateString("en-US");
  };

  const {
    handleSubmit,
    control,
    formState: { errors },
    reset,
  } = useForm({
    resolver: yupResolver(schema),
  });

  const onSubmit = (data) => {
    handleUpdateProject(data);
    handleCloseDialog2();
    reset();
  };

  const statusOptions = [
    { label: "Pending Start" },
    { label: "In Progress" },
    { label: "Completed" },
  ];

  const urgencyOptions = [
    { label: "Low" },
    { label: "Medium" },
    { label: "High" },
  ];

  const categoryOptions = [
    { label: "Technology" },
    { label: "Finance" },
    { label: "Sales" },
    { label: "Marketing" },
    { label: "Construction" },
    { label: "Event Management" },
    { label: "Human Resources" },
    { label: "Research and Development" },
  ];

  const handleMemberSelection = (event, value) => {
    console.log("Selected members:", value);

    // Check if value is null or empty (no members selected)
    if (!value || value?.length === 0) {
      // If no members selected, use the existing assignedMembers (if available) or an empty array
      const existingAssignedMembers = selectedProject.assignedMembers || [];
      setSelectedProject((prevState) => ({
        ...prevState,
        members: value,
        assignedMembers: existingAssignedMembers,
      }));
    } else {
      // If members selected, extract user_id from the selected members
      const selectedMembers = value?.map((member) => member.user_id);
      setSelectedProject((prevState) => ({
        ...prevState,
        members: value,
        assignedMembers: selectedMembers,
      }));
    }
  };

  const handleUpdateProject = async (data) => {
    try {
      const {
        projectId,
        projectName,
        description,
        startDate,
        endDate,
        urgency,
        category,
        status,
        assignedMembers,
      } = selectedProject;

      const updatedProjectData = {
        projectName,
        description,
        startDate,
        endDate,
        urgency,
        category,
        status,
        assignedMembers,
      };

      const updatedProject = await updateProject(
        projectId,
        updatedProjectData,
        dispatch
      );

      setGroupedProjects((prevProjects) =>
        prevProjects.map((project) =>
          project.projectId === updatedProject.projectId ? updatedProject : project
        )
      );

      toast.success("Project updated successfully!", {
        position: toast.POSITION.TOP_RIGHT,
      });
    } catch (error) {
      toast.error("Error updating project!", {
        position: toast.POSITION.TOP_RIGHT,
      });
    }
  };

  const handleDeleteProject = async (projectId) => {
    try {
      await deleteProject(dispatch, projectId);

      setGroupedProjects((prevProjects) =>
        prevProjects.filter((project) => project.projectId !== projectId)
      );

      toast.success("Project deleted successfully!", {
        position: toast.POSITION.TOP_RIGHT,
      });
    } catch (error) {
      console.log(error);
      toast.error("Error deleting project!", {
        position: toast.POSITION.TOP_RIGHT,
      });
    }
  };

  return (
    <>
      <div style={{ margin: "10px" }}>
        <Grid container spacing={2}>
          {isLoading ? (
            <Grid item xs={12} align="center">
              <CircularProgress />
            </Grid>
          ) : (
            groupedProjects?.map((project) => (
              <Grid item xs={12} key={project.projectId}>
                <Card>
                  <CardContent>
                    <Typography variant="h5" component="h2">
                      {project.projectName}
                    </Typography>
                    <Typography
                      variant="body2"
                      color="textSecondary"
                      component="div"
                    >
                      {project.description}
                    </Typography>
                    <Typography
                      variant="body2"
                      color="textSecondary"
                      component="div"
                    >
                      Start Date: {formatDate(project.startDate)}
                    </Typography>
                    <Typography
                      variant="body2"
                      color="textSecondary"
                      component="div"
                    >
                      End Date: {formatDate(project.endDate)}
                    </Typography>
                    <Typography
                      variant="body2"
                      color="textSecondary"
                      component="div"
                    >
                      Urgency: {project.urgency}
                    </Typography>
                    <Typography
                      variant="body2"
                      color="textSecondary"
                      component="div"
                    >
                      Category: {project.category}
                    </Typography>
                    <Typography
                      variant="body2"
                      color="textSecondary"
                      component="div"
                    >
                      Status: {project.status}
                    </Typography>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                      }}
                    >
                      <Button
                        variant="contained"
                        color="primary"
                        onClick={() => handleViewMembers(project.projectId)}
                        style={{ marginTop: "10px" }}
                        disableElevation
                      >
                        View Members
                      </Button>
                      <IconButton
                        style={{ padding: "2px" }}
                        color="primary"
                        onClick={() => handleEditProject(project.projectId)}
                        aria-label="edit"
                      >
                        <EditIcon />
                      </IconButton>
                      <IconButton
                        style={{ padding: "2px" }}
                        color="secondary"
                        onClick={() => handleDeleteProject(project.projectId)}
                        aria-label="delete"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </div>
                  </CardContent>
                </Card>
              </Grid>
            ))
          )}
        </Grid>

        {selectedProject && (
          <Dialog open={openDialog} onClose={handleCloseDialog}>
            <DialogTitle style={{ marginTop: "-10px" }}>
              {selectedProject.projectName}
            </DialogTitle>
            <DialogTitle style={{ marginTop: "-35px", fontSize: "15px" }}>
              Assigned Members
            </DialogTitle>
            <hr
              style={{
                width: "90%",
                marginTop: "-13px",
                marginBottom: "-16px",
              }}
            />
            <DialogContent>
              <DialogContentText>
                {selectedProject.members?.map((member) => (
                  <Typography key={member.email}>
                    Username: {member.username}
                    <br />
                    Email: {member.email}
                    <hr />
                  </Typography>
                ))}
              </DialogContentText>
            </DialogContent>
            <DialogActions>
              <IconButton
                edge="end"
                color="inherit"
                onClick={handleCloseDialog}
                aria-label="close"
              >
                <CloseIcon />
              </IconButton>
            </DialogActions>
          </Dialog>
        )}

        {selectedProject && (
          <Dialog open={openDialog2} onClose={handleCloseDialog2}>
            <DialogTitle>Edit Project</DialogTitle>
            <DialogContent>
              <form onSubmit={handleSubmit(onSubmit)}>
                <Controller
                  name="projectName"
                  control={control}
                  defaultValue={selectedProject.projectName}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      label="Project Name"
                      fullWidth
                      margin="normal"
                      error={!!errors.projectName}
                      helperText={errors.projectName?.message}
                    />
                  )}
                />
<Controller
  name="startDate"
  control={control}
  defaultValue={formatDate(selectedProject.startDate)}
  render={({ field }) => (
    <TextField
      {...field}
      label="Start Date"
      fullWidth
      margin="normal"
      error={!!errors.startDate}
      helperText={errors.startDate?.message}
    />
  )}
/>

<Controller
  name="endDate"
  control={control}
  defaultValue={formatDate(selectedProject.endDate)}
  render={({ field }) => (
    <TextField
      {...field}
      label="End Date"
      fullWidth
      margin="normal"
      error={!!errors.endDate}
      helperText={errors.endDate?.message}
    />
  )}
/>

<Controller
  name="status"
  control={control}
  defaultValue={selectedProject.status}
  render={({ field }) => (
    <Autocomplete
      {...field}
      value={statusOptions.find((option) => option.label === field.value)}
      onChange={(event, newValue) => field.onChange(newValue?.label)}
      options={statusOptions}
      getOptionLabel={(option) => option.label}
      renderInput={(params) => (
        <TextField
          {...params}
          label="Status"
          fullWidth
          error={!!errors.status}
          helperText={errors.status?.message}
        />
      )}
    />
  )}
/>

<Controller
  name="urgency"
  control={control}
  defaultValue={selectedProject.urgency}
  render={({ field }) => (
    <Autocomplete
      {...field}
      value={urgencyOptions.find((option) => option.label === field.value)}
      onChange={(event, newValue) => field.onChange(newValue?.label)}
      options={urgencyOptions}
      getOptionLabel={(option) => option.label}
      renderInput={(params) => (
        <TextField
          {...params}
          label="Urgency"
          fullWidth
          error={!!errors.urgency}
          helperText={errors.urgency?.message}
        />
      )}
    />
  )}
/>

<Controller
  name="category"
  control={control}
  defaultValue={selectedProject.category}
  render={({ field }) => (
    <Autocomplete
      {...field}
      value={categoryOptions.find((option) => option.label === field.value)}
      onChange={(event, newValue) => field.onChange(newValue?.label)}
      options={categoryOptions}
      getOptionLabel={(option) => option.label}
      renderInput={(params) => (
        <TextField
          {...params}
          label="Category"
          fullWidth
          error={!!errors.category}
          helperText={errors.category?.message}
        />
      )}
    />
  )}
/>

<Controller
  name="members"
  control={control}
  defaultValue={selectedProject.members || []}
  render={({ field }) => (
    <Autocomplete
      {...field}
      multiple
      options={userList}
      value={selectedProject.members || []}
      onChange={handleMemberSelection}
      getOptionLabel={(option) => option.username}
      isOptionEqualToValue={(option, value) => option.username === value.username}
      renderTags={(value, getTagProps) =>
        value.map((option, index) => (
          <Chip
            variant="outlined"
            label={option.username}
            {...getTagProps({ index })}
          />
        ))
      }
      renderInput={(params) => (
        <TextField {...params} label="Assign to Members" />
      )}
    />
  )}
/>

                <DialogActions>
                  <Button onClick={handleCloseDialog2}>Cancel</Button>
                  <Button type="submit" color="primary">
                    Save
                  </Button>
                </DialogActions>
              </form>
            </DialogContent>
          </Dialog>
        )}
      </div>
      <ToastContainer />
    </>
  );
};

export default ExistingProjects;
